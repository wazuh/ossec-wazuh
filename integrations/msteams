#!/usr/bin/env python
# Microsoft Teams Integration
#
# Copyright (C) 2015-2021, Wazuh Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# Author: @ptrsimon

import json
import sys
import os
import time

try:
    import requests
except Exception as e:
    print("No module 'requests' found. Install: pip install requests")
    sys.exit(1)

# Global vars
pwd = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
json_alert = {}
now = time.strftime("%a %b %d %H:%M:%S %Z %Y")

# Set paths
log_file = '{0}/logs/integrations.log'.format(pwd)

# Configuration
debug_enabled = True


def main(args):
    debug("# Starting")

    # Read args
    alert_file_location = args[1]
    webhook = args[3]

    debug("# Webhook")
    debug(webhook)
    debug("# File location")
    debug(alert_file_location)

    # Load alert. Parse JSON object.
    with open(alert_file_location) as alert_file:
        json_alert = json.load(alert_file)

    debug("# Processing alert")
    debug(json_alert)
    debug("# Generating message")
    msg = generate_msg(json_alert)
    debug(msg)
    debug("# Sending message")
    send_msg(msg, webhook)


def debug(msg):
    if debug_enabled:
        msg = "{0}: {1}\n".format(now, msg)
        print(msg)
        f = open(log_file, "a")
        f.write(msg)
        f.close()


def generate_msg(alert):

    level = alert['rule']['level']

    if (level <= 4):
        color = "38F202"
    elif (level >= 5 and level <= 7):
        color = "F2EB02"
    else:
        color = "F22A02"

    msg = {}
    sections = []
    msg['@type'] = "MessageCard"
    msg['themeColor'] = color
    msg['summary'] = "WAZUH Alert: " + \
        alert['rule']['description'] if 'description' in alert['rule'] else "N/A"

    facts = []
    if 'agent' in alert:
        facts.append({
            'name': 'Agent',
            'value': "({0}) - {1}".format(
                alert['agent']['id'],
                alert['agent']['name']
        )})
    if 'agentless' in alert:
        facts.append({
            'name': 'Agentless host',
            'value': alert['agentless']['host']
        })
    facts.append({
        'name': 'Location',
        'value': alert['location']
    })
    facts.append({
        'name': 'Rule ID',
        'value': "{0} _(Level {1})_".format(alert['rule']['id'], level)
    })

    sections.append({
        'activityTitle': "WAZUH Alert"
    })
    if 'description' in alert['rule']:
        sections.append({
            'title': alert['rule']['description'],
        })
    sections.append({
        'facts': facts,
        'markdown': 'true'
    })
    
    msg['sections'] = sections

    return json.dumps(msg)


def send_msg(msg, url):
    debug("# Sending alert")
    headers = {'Content-Type': 'application/json'}
    res = requests.post(url, data=msg, headers=headers)
    debug(res)


if __name__ == "__main__":
    try:
        # Read arguments
        bad_arguments = False
        if len(sys.argv) >= 4:
            msg = '{0} {1} {2}'.format(
                now,
                sys.argv[1],
                sys.argv[3],
            )
        else:
            msg = '{0} Wrong arguments'.format(now)
            bad_arguments = True

        # Logging the call
        f = open(log_file, 'a')
        f.write(msg + '\n')
        f.close()

        if bad_arguments:
            debug("# Exiting: Bad arguments.")
            sys.exit(1)

        # Main function
        main(sys.argv)

    except Exception as e:
        debug(str(e))
        raise
